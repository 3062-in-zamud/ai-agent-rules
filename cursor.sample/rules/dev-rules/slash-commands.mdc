---
description:
globs:
alwaysApply: true
---
## ✅ 共通ルール

- すべてのコマンドは `/コマンド` 単体で実行可能
- オプション（"..."など）は任意で追加可能
- コマンド名は小文字英語、`-`やCamelCaseは使用しない
- AIエージェントが実行する前提で記述
- 結果はMarkdownで返されることを想定

---

## /commit

### 概要
- 差分を確認し、**意味のある単位で自動分割してコミット**
- **Conventional Commits** に準拠した **プレフィクス付きメッセージ**をAIが自動生成

### プレフィクス一覧

| Prefix     | 用途                                 |
|------------|--------------------------------------|
| `feat`     | 新機能の追加                         |
| `fix`      | バグ修正                             |
| `refactor` | 内部ロジック改善（挙動変更なし）    |
| `chore`    | 雑務（設定ファイル、CIなど）         |
| `docs`     | ドキュメントの追加・変更             |
| `test`     | テストコードの追加・修正             |
| `style`    | フォーマット・スタイルの修正         |
| `perf`     | パフォーマンス改善                   |
| `revert`   | 変更の巻き戻し                       |

### 使用例
```
/commit
/commit "ログイン処理の改善"
/commit "リファクタ: userService の分離"
```

---

## /fix

### 概要
- 差分・ログ・エラーに基づき **修正が必要な箇所を特定し、自動修正**

### 使用例
```
/fix
/fix "fetch系のエラーを修正して"
/fix "バリデーションが機能していない"
```

---

## /refactor

### 概要
- コードの責務や関心の分離、構造を考慮し **リファクタリングを実施**

### 使用例
```
/refactor
/refactor "ネストを浅くして見通しを良くしたい"
/refactor "責務分離してドメイン層に移動して"
```

---

## /test

### 概要
- 差分に対応した **単体テスト・統合テストの自動生成**
- `make test`を実行することでテストを実行する

### 使用例
```
/test
/test "UserControllerのAPIテストを書いて"
/test "異常系も網羅して"
```

---

## /gen

### 概要
- 新しい **モジュール、API、UIなどのコードを生成**

### 使用例
```
/gen
/gen "GraphQLスキーマを作成して"
/gen "Next.jsのAPIルート作って"
```

---

## /doc

### 概要
- コード・構成・仕様などの **ドキュメントを生成**

### 使用例
```
/doc
/doc "このAPIのOpenAPI仕様書出して"
/doc "ファイル構造を図解して"
```

---

## /check

### 概要
- 現在のコードの状態をチェック
- `make check`を実行し、コードの状態を確認する。
- 問題があれば修正し、問題が解消されたことまで確認する

### 使用例
```
/check
```

---

## /review

### 概要
- 現在のコード・設計状態を **レビュー・解析し改善案を提示**

### 使用例
```
/check
/check "凝集度・結合度を確認して"
/check "責務の重複がないか確認"
```

---

## /run

### 概要
- 実行可能なテストやスクリプトなどを **一括実行し、結果を出力**
- APIをcurlで確認する場合はヘッダー情報に「X-API-KEY: API-KEY」を設定する。

### 使用例
```
/run
/run "APIレスポンス確認して"
/run "全テストをCI前に実行して"
```

---
